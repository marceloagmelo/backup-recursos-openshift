{"kind":"DaemonSet","apiVersion":"extensions/v1beta1","metadata":{"name":"sync","namespace":"openshift-node","selfLink":"/apis/extensions/v1beta1/namespaces/openshift-node/daemonsets/sync","uid":"94f820cc-a715-11e9-9411-42010a9e0002","resourceVersion":"232857","generation":2,"creationTimestamp":"2019-07-15T15:31:14Z","labels":{"app":"sync","component":"network","openshift.io/component":"sync","type":"infra"},"annotations":{"image.openshift.io/triggers":"[\n  {\"from\":{\"kind\":\"ImageStreamTag\",\"name\":\"node:v3.11\"},\"fieldPath\":\"spec.template.spec.containers[?(@.name==\\\"sync\\\")].image\"}\n]\n","kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"apps/v1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{\"image.openshift.io/triggers\":\"[\\n  {\\\"from\\\":{\\\"kind\\\":\\\"ImageStreamTag\\\",\\\"name\\\":\\\"node:v3.11\\\"},\\\"fieldPath\\\":\\\"spec.template.spec.containers[?(@.name==\\\\\\\"sync\\\\\\\")].image\\\"}\\n]\\n\",\"kubernetes.io/description\":\"This daemon set provides dynamic configuration of nodes and relabels nodes as appropriate.\\n\"},\"name\":\"sync\",\"namespace\":\"openshift-node\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app\":\"sync\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"app\":\"sync\",\"component\":\"network\",\"openshift.io/component\":\"sync\",\"type\":\"infra\"}},\"spec\":{\"containers\":[{\"command\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -euo pipefail\\n\\n# set by the node image\\nunset KUBECONFIG\\n\\ntrap 'kill $(jobs -p); exit 0' TERM\\n\\n# track the current state of the config\\nif [[ -f /etc/origin/node/node-config.yaml ]]; then\\n  md5sum /etc/origin/node/node-config.yaml \\u003e /tmp/.old\\nelse\\n  touch /tmp/.old\\nfi\\n\\n# loop until BOOTSTRAP_CONFIG_NAME is set\\nwhile true; do\\n  file=/etc/sysconfig/origin-node\\n  if [[ -f /etc/sysconfig/atomic-openshift-node ]]; then\\n    file=/etc/sysconfig/atomic-openshift-node\\n  elif [[ -f /etc/sysconfig/origin-node ]]; then\\n    file=/etc/sysconfig/origin-node\\n  else\\n    echo \\\"info: Waiting for the node sysconfig file to be created\\\" 2\\u003e\\u00261\\n    sleep 15 \\u0026 wait\\n    continue\\n  fi\\n  name=\\\"$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\\\\1|p' \\\"${file}\\\" | head -1)\\\"\\n  if [[ -z \\\"${name}\\\" ]]; then\\n    echo \\\"info: Waiting for BOOTSTRAP_CONFIG_NAME to be set\\\" 2\\u003e\\u00261\\n    sleep 15 \\u0026 wait\\n    continue\\n  fi\\n  # in the background check to see if the value changes and exit if so\\n  pid=$BASHPID\\n  (\\n    while true; do\\n      if ! updated=\\\"$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\\\\1|p' \\\"${file}\\\" | head -1)\\\"; then\\n        echo \\\"error: Unable to check for bootstrap config, exiting\\\" 2\\u003e\\u00261\\n        kill $pid\\n        exit 1\\n      fi\\n      if [[ \\\"${updated}\\\" != \\\"${name}\\\" ]]; then\\n        echo \\\"info: Bootstrap configuration profile name changed, exiting\\\" 2\\u003e\\u00261\\n        kill $pid\\n        exit 0\\n      fi\\n      sleep 15\\n    done\\n  ) \\u0026\\n  break\\ndone\\nmkdir -p /etc/origin/node/tmp\\n# periodically refresh both node-config.yaml and relabel the node\\nwhile true; do\\n  if ! oc extract \\\"configmaps/${name}\\\" -n openshift-node --to=/etc/origin/node/tmp --confirm --request-timeout=10s --config /etc/origin/node/node.kubeconfig \\\"--token=$( cat /var/run/secrets/kubernetes.io/serviceaccount/token )\\\"  \\u003e /dev/null; then\\n    echo \\\"error: Unable to retrieve latest config for node\\\" 2\\u003e\\u00261\\n    sleep 15 \\u0026\\n    wait $!\\n    continue\\n  fi\\n\\n  # does the openshift-ca.crt exist\\n  if [[ -f /etc/pki/ca-trust/source/anchors/openshift-ca.crt ]]; then\\n    md5sum /etc/pki/ca-trust/source/anchors/openshift-ca.crt \\u003e /tmp/.old-openshift-ca\\n  else\\n    cat /dev/null \\u003e /tmp/.old-openshift-ca\\n  fi\\n\\n  md5sum  /run/secrets/kubernetes.io/serviceaccount/ca.crt \\u003e /tmp/.new-openshift-ca\\n\\n  if [[ \\\"$( cat /tmp/.old-openshift-ca )\\\" != \\\"$( cat /tmp/.new-openshift-ca )\\\" ]]; then\\n    cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /etc/pki/ca-trust/source/anchors/openshift-ca.crt\\n    update-ca-trust\\n  fi\\n\\n  KUBELET_HOSTNAME_OVERRIDE=$(cat /etc/sysconfig/KUBELET_HOSTNAME_OVERRIDE 2\\u003e/dev/null) || :\\n  if ! [[ -z \\\"$KUBELET_HOSTNAME_OVERRIDE\\\" ]]; then\\n        #Patching node-config for hostname override\\n        echo \\\"nodeName: $KUBELET_HOSTNAME_OVERRIDE\\\" \\u003e\\u003e /etc/origin/node/tmp/node-config.yaml\\n  fi\\n\\n  # detect whether the node-config.yaml or volume-config.yaml has changed, and if so trigger a restart of the kubelet.\\n  if [[ ! -f /etc/origin/node/node-config.yaml ]]; then\\n    cat /dev/null \\u003e /tmp/.old\\n  fi\\n\\n  tmp_path=/etc/origin/node/tmp\\n  if [[ -f ${tmp_path}/volume-config.yaml ]]; then\\n    tar -Pcf ${tmp_path}/configs.tar ${tmp_path}/volume-config.yaml ${tmp_path}/node-config.yaml\\n    md5sum ${tmp_path}/configs.tar \\u003e /tmp/.new\\n    rm ${tmp_path}/configs.tar\\n  else\\n    md5sum ${tmp_path}/node-config.yaml \\u003e /tmp/.new\\n  fi\\n\\n  if [[ \\\"$( cat /tmp/.old )\\\" != \\\"$( cat /tmp/.new )\\\" \\u0026\\u0026 -f ${tmp_path}/volume-config.yaml ]]; then\\n    mv /etc/origin/node/tmp/volume-config.yaml /etc/origin/node/volume-config.yaml\\n  fi\\n\\n  if [[ \\\"$( cat /tmp/.old )\\\" != \\\"$( cat /tmp/.new )\\\" ]]; then\\n    mv /etc/origin/node/tmp/node-config.yaml /etc/origin/node/node-config.yaml\\n    SYSTEMD_IGNORE_CHROOT=1 systemctl restart tuned || :\\n    echo \\\"info: Configuration changed, restarting kubelet\\\" 2\\u003e\\u00261\\n    # TODO: kubelet doesn't relabel nodes, best effort for now\\n    # https://github.com/kubernetes/kubernetes/issues/59314\\n    if args=\\\"$(openshift-node-config --config /etc/origin/node/node-config.yaml)\\\"; then\\n      labels=$(tr ' ' '\\\\n' \\u003c\\u003c\\u003c$args | sed -ne '/^--node-labels=/ { s/^--node-labels=//; p; }' | tr ',\\\\n' ' ')\\n      if [[ -n \\\"${labels}\\\" ]]; then\\n        echo \\\"info: Applying node labels $labels\\\" 2\\u003e\\u00261\\n        if ! oc label --config=/etc/origin/node/node.kubeconfig \\\"node/${NODE_NAME}\\\" ${labels} --overwrite; then\\n          echo \\\"error: Unable to apply labels, will retry in 10\\\" 2\\u003e\\u00261\\n          sleep 10 \\u0026\\n          wait $!\\n          continue\\n        fi\\n      fi\\n    else\\n      echo \\\"error: The downloaded node configuration is invalid, retrying later\\\" 2\\u003e\\u00261\\n      sleep 10 \\u0026\\n      wait $!\\n      continue\\n    fi\\n    if ! pkill -U 0 -f '(^|/)hyperkube kubelet '; then\\n      echo \\\"error: Unable to restart Kubelet\\\" 2\\u003e\\u00261\\n      sleep 10 \\u0026\\n      wait $!\\n      continue\\n    fi\\n  fi\\n  # annotate node with md5sum of the config\\n  oc annotate --config=/etc/origin/node/node.kubeconfig \\\"node/${NODE_NAME}\\\" \\\\\\n    node.openshift.io/md5sum=\\\"$( cat /tmp/.new | cut -d' ' -f1 )\\\" --overwrite\\n  cp -f /tmp/.new /tmp/.old\\n  sleep 180 \\u0026\\n  wait $!\\ndone\\n\"],\"env\":[{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"spec.nodeName\"}}}],\"image\":\" \",\"name\":\"sync\",\"securityContext\":{\"privileged\":true,\"runAsUser\":0},\"volumeMounts\":[{\"mountPath\":\"/etc/origin/node/\",\"name\":\"host-config\"},{\"mountPath\":\"/etc/sysconfig\",\"name\":\"host-sysconfig-node\",\"readOnly\":true},{\"mountPath\":\"/var/run/dbus\",\"name\":\"var-run-dbus\",\"readOnly\":true},{\"mountPath\":\"/run/systemd/system\",\"name\":\"run-systemd-system\",\"readOnly\":true},{\"mountPath\":\"/etc/pki\",\"name\":\"host-pki\"}]}],\"hostNetwork\":true,\"hostPID\":true,\"priorityClassName\":\"system-node-critical\",\"serviceAccountName\":\"sync\",\"terminationGracePeriodSeconds\":1,\"tolerations\":[{\"operator\":\"Exists\"}],\"volumes\":[{\"hostPath\":{\"path\":\"/etc/origin/node\"},\"name\":\"host-config\"},{\"hostPath\":{\"path\":\"/etc/sysconfig\"},\"name\":\"host-sysconfig-node\"},{\"hostPath\":{\"path\":\"/var/run/dbus\"},\"name\":\"var-run-dbus\"},{\"hostPath\":{\"path\":\"/run/systemd/system\"},\"name\":\"run-systemd-system\"},{\"hostPath\":{\"path\":\"/etc/pki\",\"type\":\"\"},\"name\":\"host-pki\"}]}},\"updateStrategy\":{\"rollingUpdate\":{\"maxUnavailable\":\"50%\"},\"type\":\"RollingUpdate\"}}}\n","kubernetes.io/description":"This daemon set provides dynamic configuration of nodes and relabels nodes as appropriate.\n"}},"spec":{"selector":{"matchLabels":{"app":"sync"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"sync","component":"network","openshift.io/component":"sync","type":"infra"},"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""}},"spec":{"volumes":[{"name":"host-config","hostPath":{"path":"/etc/origin/node","type":""}},{"name":"host-sysconfig-node","hostPath":{"path":"/etc/sysconfig","type":""}},{"name":"var-run-dbus","hostPath":{"path":"/var/run/dbus","type":""}},{"name":"run-systemd-system","hostPath":{"path":"/run/systemd/system","type":""}},{"name":"host-pki","hostPath":{"path":"/etc/pki","type":""}}],"containers":[{"name":"sync","image":"docker.io/openshift/origin-node:v3.11","command":["/bin/bash","-c","#!/bin/bash\nset -euo pipefail\n\n# set by the node image\nunset KUBECONFIG\n\ntrap 'kill $(jobs -p); exit 0' TERM\n\n# track the current state of the config\nif [[ -f /etc/origin/node/node-config.yaml ]]; then\n  md5sum /etc/origin/node/node-config.yaml \u003e /tmp/.old\nelse\n  touch /tmp/.old\nfi\n\n# loop until BOOTSTRAP_CONFIG_NAME is set\nwhile true; do\n  file=/etc/sysconfig/origin-node\n  if [[ -f /etc/sysconfig/atomic-openshift-node ]]; then\n    file=/etc/sysconfig/atomic-openshift-node\n  elif [[ -f /etc/sysconfig/origin-node ]]; then\n    file=/etc/sysconfig/origin-node\n  else\n    echo \"info: Waiting for the node sysconfig file to be created\" 2\u003e\u00261\n    sleep 15 \u0026 wait\n    continue\n  fi\n  name=\"$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\\1|p' \"${file}\" | head -1)\"\n  if [[ -z \"${name}\" ]]; then\n    echo \"info: Waiting for BOOTSTRAP_CONFIG_NAME to be set\" 2\u003e\u00261\n    sleep 15 \u0026 wait\n    continue\n  fi\n  # in the background check to see if the value changes and exit if so\n  pid=$BASHPID\n  (\n    while true; do\n      if ! updated=\"$(sed -nE 's|^BOOTSTRAP_CONFIG_NAME=([^#].+)|\\1|p' \"${file}\" | head -1)\"; then\n        echo \"error: Unable to check for bootstrap config, exiting\" 2\u003e\u00261\n        kill $pid\n        exit 1\n      fi\n      if [[ \"${updated}\" != \"${name}\" ]]; then\n        echo \"info: Bootstrap configuration profile name changed, exiting\" 2\u003e\u00261\n        kill $pid\n        exit 0\n      fi\n      sleep 15\n    done\n  ) \u0026\n  break\ndone\nmkdir -p /etc/origin/node/tmp\n# periodically refresh both node-config.yaml and relabel the node\nwhile true; do\n  if ! oc extract \"configmaps/${name}\" -n openshift-node --to=/etc/origin/node/tmp --confirm --request-timeout=10s --config /etc/origin/node/node.kubeconfig \"--token=$( cat /var/run/secrets/kubernetes.io/serviceaccount/token )\"  \u003e /dev/null; then\n    echo \"error: Unable to retrieve latest config for node\" 2\u003e\u00261\n    sleep 15 \u0026\n    wait $!\n    continue\n  fi\n\n  # does the openshift-ca.crt exist\n  if [[ -f /etc/pki/ca-trust/source/anchors/openshift-ca.crt ]]; then\n    md5sum /etc/pki/ca-trust/source/anchors/openshift-ca.crt \u003e /tmp/.old-openshift-ca\n  else\n    cat /dev/null \u003e /tmp/.old-openshift-ca\n  fi\n\n  md5sum  /run/secrets/kubernetes.io/serviceaccount/ca.crt \u003e /tmp/.new-openshift-ca\n\n  if [[ \"$( cat /tmp/.old-openshift-ca )\" != \"$( cat /tmp/.new-openshift-ca )\" ]]; then\n    cp /run/secrets/kubernetes.io/serviceaccount/ca.crt /etc/pki/ca-trust/source/anchors/openshift-ca.crt\n    update-ca-trust\n  fi\n\n  KUBELET_HOSTNAME_OVERRIDE=$(cat /etc/sysconfig/KUBELET_HOSTNAME_OVERRIDE 2\u003e/dev/null) || :\n  if ! [[ -z \"$KUBELET_HOSTNAME_OVERRIDE\" ]]; then\n        #Patching node-config for hostname override\n        echo \"nodeName: $KUBELET_HOSTNAME_OVERRIDE\" \u003e\u003e /etc/origin/node/tmp/node-config.yaml\n  fi\n\n  # detect whether the node-config.yaml or volume-config.yaml has changed, and if so trigger a restart of the kubelet.\n  if [[ ! -f /etc/origin/node/node-config.yaml ]]; then\n    cat /dev/null \u003e /tmp/.old\n  fi\n\n  tmp_path=/etc/origin/node/tmp\n  if [[ -f ${tmp_path}/volume-config.yaml ]]; then\n    tar -Pcf ${tmp_path}/configs.tar ${tmp_path}/volume-config.yaml ${tmp_path}/node-config.yaml\n    md5sum ${tmp_path}/configs.tar \u003e /tmp/.new\n    rm ${tmp_path}/configs.tar\n  else\n    md5sum ${tmp_path}/node-config.yaml \u003e /tmp/.new\n  fi\n\n  if [[ \"$( cat /tmp/.old )\" != \"$( cat /tmp/.new )\" \u0026\u0026 -f ${tmp_path}/volume-config.yaml ]]; then\n    mv /etc/origin/node/tmp/volume-config.yaml /etc/origin/node/volume-config.yaml\n  fi\n\n  if [[ \"$( cat /tmp/.old )\" != \"$( cat /tmp/.new )\" ]]; then\n    mv /etc/origin/node/tmp/node-config.yaml /etc/origin/node/node-config.yaml\n    SYSTEMD_IGNORE_CHROOT=1 systemctl restart tuned || :\n    echo \"info: Configuration changed, restarting kubelet\" 2\u003e\u00261\n    # TODO: kubelet doesn't relabel nodes, best effort for now\n    # https://github.com/kubernetes/kubernetes/issues/59314\n    if args=\"$(openshift-node-config --config /etc/origin/node/node-config.yaml)\"; then\n      labels=$(tr ' ' '\\n' \u003c\u003c\u003c$args | sed -ne '/^--node-labels=/ { s/^--node-labels=//; p; }' | tr ',\\n' ' ')\n      if [[ -n \"${labels}\" ]]; then\n        echo \"info: Applying node labels $labels\" 2\u003e\u00261\n        if ! oc label --config=/etc/origin/node/node.kubeconfig \"node/${NODE_NAME}\" ${labels} --overwrite; then\n          echo \"error: Unable to apply labels, will retry in 10\" 2\u003e\u00261\n          sleep 10 \u0026\n          wait $!\n          continue\n        fi\n      fi\n    else\n      echo \"error: The downloaded node configuration is invalid, retrying later\" 2\u003e\u00261\n      sleep 10 \u0026\n      wait $!\n      continue\n    fi\n    if ! pkill -U 0 -f '(^|/)hyperkube kubelet '; then\n      echo \"error: Unable to restart Kubelet\" 2\u003e\u00261\n      sleep 10 \u0026\n      wait $!\n      continue\n    fi\n  fi\n  # annotate node with md5sum of the config\n  oc annotate --config=/etc/origin/node/node.kubeconfig \"node/${NODE_NAME}\" \\\n    node.openshift.io/md5sum=\"$( cat /tmp/.new | cut -d' ' -f1 )\" --overwrite\n  cp -f /tmp/.new /tmp/.old\n  sleep 180 \u0026\n  wait $!\ndone\n"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"apiVersion":"v1","fieldPath":"spec.nodeName"}}}],"resources":{},"volumeMounts":[{"name":"host-config","mountPath":"/etc/origin/node/"},{"name":"host-sysconfig-node","readOnly":true,"mountPath":"/etc/sysconfig"},{"name":"var-run-dbus","readOnly":true,"mountPath":"/var/run/dbus"},{"name":"run-systemd-system","readOnly":true,"mountPath":"/run/systemd/system"},{"name":"host-pki","mountPath":"/etc/pki"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{"privileged":true,"runAsUser":0}}],"restartPolicy":"Always","terminationGracePeriodSeconds":1,"dnsPolicy":"ClusterFirst","serviceAccountName":"sync","serviceAccount":"sync","hostNetwork":true,"hostPID":true,"securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"operator":"Exists"}],"priorityClassName":"system-node-critical"}},"updateStrategy":{"type":"RollingUpdate","rollingUpdate":{"maxUnavailable":"50%"}},"templateGeneration":2,"revisionHistoryLimit":10},"status":{"currentNumberScheduled":1,"numberMisscheduled":0,"desiredNumberScheduled":1,"numberReady":1,"observedGeneration":2,"updatedNumberScheduled":1,"numberAvailable":1}}
