{"kind":"Template","apiVersion":"template.openshift.io/v1","metadata":{"name":"amp-apicast-wildcard-router","namespace":"openshift","selfLink":"/apis/template.openshift.io/v1/namespaces/openshift/templates/amp-apicast-wildcard-router","uid":"b968c1ec-b867-11e9-993c-080027321238","resourceVersion":"892","creationTimestamp":"2019-08-06T16:32:04Z"},"objects":[{"apiVersion":"v1","kind":"DeploymentConfig","metadata":{"name":"apicast-router"},"spec":{"replicas":1,"selector":{"deploymentconfig":"apicast-router"},"strategy":{"type":"Rolling"},"template":{"metadata":{"labels":{"deploymentconfig":"apicast-router"}},"spec":{"containers":[{"command":["bin/apicast"],"env":[{"name":"APICAST_CONFIGURATION_LOADER","value":"lazy"},{"name":"APICAST_CONFIGURATION_CACHE","value":"0"}],"image":"3scale-amp20/apicast-gateway:1.0-3","imagePullPolicy":"IfNotPresent","livenessProbe":{"initialDelaySeconds":5,"periodSeconds":10,"tcpSocket":{"port":"router"},"timeoutSeconds":5},"name":"apicast-router","ports":[{"containerPort":8082,"name":"router","protocol":"TCP"},{"containerPort":8090,"name":"management","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/status/ready","port":"management"},"initialDelaySeconds":5,"periodSeconds":30,"timeoutSeconds":5},"volumeMounts":[{"mountPath":"/opt/app-root/src/sites.d/","name":"apicast-router-config","readOnly":true}]}],"volumes":[{"configMap":{"items":[{"key":"router.conf","path":"router.conf"}],"name":"apicast-router-config"},"name":"apicast-router-config"}]}},"triggers":[{"type":"ConfigChange"}]}},{"apiVersion":"v1","kind":"Service","metadata":{"name":"apicast-router"},"spec":{"ports":[{"name":"router","port":80,"protocol":"TCP","targetPort":"router"}],"selector":{"deploymentconfig":"apicast-router"}}},{"apiVersion":"v1","data":{"router.conf":"upstream wildcard {\n  server 0.0.0.1:1;\n\n  balancer_by_lua_block {\n    local round_robin = require 'resty.balancer.round_robin'\n    local balancer = round_robin.new()\n    local peers = balancer:peers(ngx.ctx.apicast)\n\n    local peer, err = balancer:set_peer(peers)\n\n    if not peer then\n      ngx.status = ngx.HTTP_SERVICE_UNAVAILABLE\n      ngx.log(ngx.ERR, \"failed to set current backend peer: \", err)\n      ngx.exit(ngx.status)\n    end\n  }\n\n  keepalive 1024;\n}\n\nserver {\n  listen 8082;\n  server_name ~-(?\u003capicast\u003eapicast-(staging|production))\\.;\n  access_log /dev/stdout combined;\n\n  location / {\n    access_by_lua_block {\n      local resolver = require('resty.resolver'):instance()\n      local servers = resolver:get_servers(ngx.var.apicast, { port = 8080 })\n\n      if #servers == 0 then\n        ngx.status = ngx.HTTP_BAD_GATEWAY\n        ngx.exit(ngx.HTTP_OK)\n      end\n\n      ngx.ctx.apicast = servers\n    }\n    proxy_http_version 1.1;\n    proxy_pass $scheme://wildcard;\n    proxy_set_header Host $host;\n    proxy_set_header Connection \"\";\n  }\n}"},"kind":"ConfigMap","metadata":{"name":"apicast-router-config"}},{"apiVersion":"v1","kind":"Route","metadata":{"labels":{"app":"apicast-wildcard-router"},"name":"apicast-wildcard-router"},"spec":{"host":"apicast-${TENANT_NAME}.${WILDCARD_DOMAIN}","port":{"targetPort":"router"},"tls":{"insecureEdgeTerminationPolicy":"Allow","termination":"edge"},"to":{"kind":"Service","name":"apicast-router"},"wildcardPolicy":"Subdomain"}}],"parameters":[{"name":"AMP_RELEASE","description":"AMP release tag.","value":"2.0.0-CR2-redhat-1","required":true},{"name":"WILDCARD_DOMAIN","description":"Root domain for the wildcard routes. Eg. example.com will generate 3scale-admin.example.com.","required":true},{"name":"TENANT_NAME","description":"Domain name under the root that Admin UI will be available with -admin suffix.","value":"3scale","required":true}]}
