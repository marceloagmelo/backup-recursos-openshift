{"kind":"DaemonSet","apiVersion":"extensions/v1beta1","metadata":{"name":"sdn","namespace":"openshift-sdn","selfLink":"/apis/extensions/v1beta1/namespaces/openshift-sdn/daemonsets/sdn","uid":"a39f68de-a715-11e9-9411-42010a9e0002","resourceVersion":"385026","generation":2,"creationTimestamp":"2019-07-15T15:31:39Z","labels":{"app":"sdn","component":"network","openshift.io/component":"network","type":"infra"},"annotations":{"image.openshift.io/triggers":"[\n  {\"from\":{\"kind\":\"ImageStreamTag\",\"name\":\"node:v3.11\"},\"fieldPath\":\"spec.template.spec.containers[?(@.name==\\\"sdn\\\")].image\"}\n]\n","kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"apps/v1\",\"kind\":\"DaemonSet\",\"metadata\":{\"annotations\":{\"image.openshift.io/triggers\":\"[\\n  {\\\"from\\\":{\\\"kind\\\":\\\"ImageStreamTag\\\",\\\"name\\\":\\\"node:v3.11\\\"},\\\"fieldPath\\\":\\\"spec.template.spec.containers[?(@.name==\\\\\\\"sdn\\\\\\\")].image\\\"}\\n]\\n\",\"kubernetes.io/description\":\"This daemon set launches the OpenShift networking components (kube-proxy, DNS, and openshift-sdn).\\nIt expects that OVS is running on the node.\\n\"},\"name\":\"sdn\",\"namespace\":\"openshift-sdn\"},\"spec\":{\"selector\":{\"matchLabels\":{\"app\":\"sdn\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"app\":\"sdn\",\"component\":\"network\",\"openshift.io/component\":\"network\",\"type\":\"infra\"}},\"spec\":{\"containers\":[{\"command\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -euo pipefail\\n\\n# if another process is listening on the cni-server socket, wait until it exits\\ntrap 'kill $(jobs -p); rm -Rf /etc/cni/net.d/80-openshift-network.conf ; exit 0' TERM\\nretries=0\\nwhile true; do\\n  if echo 'test' | socat - UNIX-CONNECT:/var/run/openshift-sdn/cni-server.sock \\u003e/dev/null; then\\n    echo \\\"warning: Another process is currently listening on the CNI socket, waiting 15s ...\\\" 2\\u003e\\u00261\\n    sleep 15 \\u0026 wait\\n    (( retries += 1 ))\\n  else\\n    break\\n  fi\\n  if [[ \\\"${retries}\\\" -gt 40 ]]; then\\n    echo \\\"error: Another process is currently listening on the CNI socket, exiting\\\" 2\\u003e\\u00261\\n    exit 1\\n  fi\\ndone\\n# if the node config doesn't exist yet, wait until it does\\nretries=0\\nwhile true; do\\n  if [[ ! -f /etc/origin/node/node-config.yaml ]]; then\\n    echo \\\"warning: Cannot find existing node-config.yaml, waiting 15s ...\\\" 2\\u003e\\u00261\\n    sleep 15 \\u0026 wait\\n    (( retries += 1 ))\\n  else\\n    break\\n  fi\\n  if [[ \\\"${retries}\\\" -gt 40 ]]; then\\n    echo \\\"error: No existing node-config.yaml, exiting\\\" 2\\u003e\\u00261\\n    exit 1\\n  fi\\ndone\\n\\n# Take over network functions on the node\\nrm -Rf /etc/cni/net.d/80-openshift-network.conf\\ncp -Rf /opt/cni/bin/* /host/opt/cni/bin/\\n\\n# Load DEBUG_LOGLEVEL\\nif [[ -f /etc/sysconfig/origin-node ]]; then\\n  set -o allexport\\n  source /etc/sysconfig/origin-node\\nelif [[ -f /etc/sysconfig/atomic-openshift-node ]]; then\\n  set -o allexport\\n  source /etc/sysconfig/atomic-openshift-node\\nfi\\n\\n# use either the bootstrapped node kubeconfig or the static configuration\\nfile=/etc/origin/node/node.kubeconfig\\nif [[ ! -f \\\"${file}\\\" ]]; then\\n  # use the static node config if it exists\\n  # TODO: remove when static node configuration is no longer supported\\n  for f in /etc/origin/node/system*.kubeconfig; do\\n    echo \\\"info: Using ${f} for node configuration\\\" 1\\u003e\\u00262\\n    file=\\\"${f}\\\"\\n    break\\n  done\\nfi\\n# Use the same config as the node, but with the service account token\\noc config \\\"--config=${file}\\\" view --flatten \\u003e /tmp/kubeconfig\\noc config --config=/tmp/kubeconfig set-credentials sa \\\"--token=$( cat /var/run/secrets/kubernetes.io/serviceaccount/token )\\\"\\noc config --config=/tmp/kubeconfig set-context \\\"$( oc config --config=/tmp/kubeconfig current-context )\\\" --user=sa\\n# Launch the network process\\nif which openshift-sdn; then\\n  exec openshift-sdn --config=/etc/origin/node/node-config.yaml --kubeconfig=/tmp/kubeconfig --loglevel=${DEBUG_LOGLEVEL:-2}\\nfi\\nexec openshift start network --config=/etc/origin/node/node-config.yaml --kubeconfig=/tmp/kubeconfig --loglevel=${DEBUG_LOGLEVEL:-2}\\n\"],\"env\":[{\"name\":\"OPENSHIFT_DNS_DOMAIN\",\"value\":\"cluster.local\"}],\"image\":\" \",\"lifecycle\":{\"preStop\":{\"exec\":{\"command\":[\"rm\",\"-Rf\",\"/etc/cni/net.d/80-openshift-network.conf\",\"/host/opt/cni/bin/openshift-sdn\"]}}},\"name\":\"sdn\",\"ports\":[{\"containerPort\":10256,\"name\":\"healthz\"}],\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"200Mi\"}},\"securityContext\":{\"privileged\":true,\"runAsUser\":0},\"tolerations\":[{\"operator\":\"Exists\"}],\"volumeMounts\":[{\"mountPath\":\"/etc/origin/node/\",\"name\":\"host-config\",\"readOnly\":true},{\"mountPath\":\"/etc/sysconfig/origin-node\",\"name\":\"host-sysconfig-node\",\"readOnly\":true},{\"mountPath\":\"/var/run\",\"name\":\"host-var-run\"},{\"mountPath\":\"/var/run/dbus/\",\"name\":\"host-var-run-dbus\",\"readOnly\":true},{\"mountPath\":\"/var/run/openvswitch/\",\"name\":\"host-var-run-ovs\",\"readOnly\":true},{\"mountPath\":\"/var/run/kubernetes/\",\"name\":\"host-var-run-kubernetes\",\"readOnly\":true},{\"mountPath\":\"/var/run/openshift-sdn\",\"name\":\"host-var-run-openshift-sdn\"},{\"mountPath\":\"/host/opt/cni/bin\",\"name\":\"host-opt-cni-bin\"},{\"mountPath\":\"/etc/cni/net.d\",\"name\":\"host-etc-cni-netd\"},{\"mountPath\":\"/var/lib/cni/networks/openshift-sdn\",\"name\":\"host-var-lib-cni-networks-openshift-sdn\"}]}],\"hostNetwork\":true,\"hostPID\":true,\"priorityClassName\":\"system-node-critical\",\"serviceAccountName\":\"sdn\",\"tolerations\":[{\"operator\":\"Exists\"}],\"volumes\":[{\"hostPath\":{\"path\":\"/etc/origin/node\"},\"name\":\"host-config\"},{\"hostPath\":{\"path\":\"/etc/sysconfig/origin-node\"},\"name\":\"host-sysconfig-node\"},{\"hostPath\":{\"path\":\"/lib/modules\"},\"name\":\"host-modules\"},{\"hostPath\":{\"path\":\"/var/run\"},\"name\":\"host-var-run\"},{\"hostPath\":{\"path\":\"/var/run/dbus\"},\"name\":\"host-var-run-dbus\"},{\"hostPath\":{\"path\":\"/var/run/openvswitch\"},\"name\":\"host-var-run-ovs\"},{\"hostPath\":{\"path\":\"/var/run/kubernetes\"},\"name\":\"host-var-run-kubernetes\"},{\"hostPath\":{\"path\":\"/var/run/openshift-sdn\"},\"name\":\"host-var-run-openshift-sdn\"},{\"hostPath\":{\"path\":\"/opt/cni/bin\"},\"name\":\"host-opt-cni-bin\"},{\"hostPath\":{\"path\":\"/etc/cni/net.d\"},\"name\":\"host-etc-cni-netd\"},{\"hostPath\":{\"path\":\"/var/lib/cni/networks/openshift-sdn\"},\"name\":\"host-var-lib-cni-networks-openshift-sdn\"}]}},\"updateStrategy\":{\"type\":\"OnDelete\"}}}\n","kubernetes.io/description":"This daemon set launches the OpenShift networking components (kube-proxy, DNS, and openshift-sdn).\nIt expects that OVS is running on the node.\n"}},"spec":{"selector":{"matchLabels":{"app":"sdn"}},"template":{"metadata":{"creationTimestamp":null,"labels":{"app":"sdn","component":"network","openshift.io/component":"network","type":"infra"},"annotations":{"scheduler.alpha.kubernetes.io/critical-pod":""}},"spec":{"volumes":[{"name":"host-config","hostPath":{"path":"/etc/origin/node","type":""}},{"name":"host-sysconfig-node","hostPath":{"path":"/etc/sysconfig/origin-node","type":""}},{"name":"host-modules","hostPath":{"path":"/lib/modules","type":""}},{"name":"host-var-run","hostPath":{"path":"/var/run","type":""}},{"name":"host-var-run-dbus","hostPath":{"path":"/var/run/dbus","type":""}},{"name":"host-var-run-ovs","hostPath":{"path":"/var/run/openvswitch","type":""}},{"name":"host-var-run-kubernetes","hostPath":{"path":"/var/run/kubernetes","type":""}},{"name":"host-var-run-openshift-sdn","hostPath":{"path":"/var/run/openshift-sdn","type":""}},{"name":"host-opt-cni-bin","hostPath":{"path":"/opt/cni/bin","type":""}},{"name":"host-etc-cni-netd","hostPath":{"path":"/etc/cni/net.d","type":""}},{"name":"host-var-lib-cni-networks-openshift-sdn","hostPath":{"path":"/var/lib/cni/networks/openshift-sdn","type":""}}],"containers":[{"name":"sdn","image":"docker.io/openshift/origin-node:v3.11","command":["/bin/bash","-c","#!/bin/bash\nset -euo pipefail\n\n# if another process is listening on the cni-server socket, wait until it exits\ntrap 'kill $(jobs -p); rm -Rf /etc/cni/net.d/80-openshift-network.conf ; exit 0' TERM\nretries=0\nwhile true; do\n  if echo 'test' | socat - UNIX-CONNECT:/var/run/openshift-sdn/cni-server.sock \u003e/dev/null; then\n    echo \"warning: Another process is currently listening on the CNI socket, waiting 15s ...\" 2\u003e\u00261\n    sleep 15 \u0026 wait\n    (( retries += 1 ))\n  else\n    break\n  fi\n  if [[ \"${retries}\" -gt 40 ]]; then\n    echo \"error: Another process is currently listening on the CNI socket, exiting\" 2\u003e\u00261\n    exit 1\n  fi\ndone\n# if the node config doesn't exist yet, wait until it does\nretries=0\nwhile true; do\n  if [[ ! -f /etc/origin/node/node-config.yaml ]]; then\n    echo \"warning: Cannot find existing node-config.yaml, waiting 15s ...\" 2\u003e\u00261\n    sleep 15 \u0026 wait\n    (( retries += 1 ))\n  else\n    break\n  fi\n  if [[ \"${retries}\" -gt 40 ]]; then\n    echo \"error: No existing node-config.yaml, exiting\" 2\u003e\u00261\n    exit 1\n  fi\ndone\n\n# Take over network functions on the node\nrm -Rf /etc/cni/net.d/80-openshift-network.conf\ncp -Rf /opt/cni/bin/* /host/opt/cni/bin/\n\n# Load DEBUG_LOGLEVEL\nif [[ -f /etc/sysconfig/origin-node ]]; then\n  set -o allexport\n  source /etc/sysconfig/origin-node\nelif [[ -f /etc/sysconfig/atomic-openshift-node ]]; then\n  set -o allexport\n  source /etc/sysconfig/atomic-openshift-node\nfi\n\n# use either the bootstrapped node kubeconfig or the static configuration\nfile=/etc/origin/node/node.kubeconfig\nif [[ ! -f \"${file}\" ]]; then\n  # use the static node config if it exists\n  # TODO: remove when static node configuration is no longer supported\n  for f in /etc/origin/node/system*.kubeconfig; do\n    echo \"info: Using ${f} for node configuration\" 1\u003e\u00262\n    file=\"${f}\"\n    break\n  done\nfi\n# Use the same config as the node, but with the service account token\noc config \"--config=${file}\" view --flatten \u003e /tmp/kubeconfig\noc config --config=/tmp/kubeconfig set-credentials sa \"--token=$( cat /var/run/secrets/kubernetes.io/serviceaccount/token )\"\noc config --config=/tmp/kubeconfig set-context \"$( oc config --config=/tmp/kubeconfig current-context )\" --user=sa\n# Launch the network process\nif which openshift-sdn; then\n  exec openshift-sdn --config=/etc/origin/node/node-config.yaml --kubeconfig=/tmp/kubeconfig --loglevel=${DEBUG_LOGLEVEL:-2}\nfi\nexec openshift start network --config=/etc/origin/node/node-config.yaml --kubeconfig=/tmp/kubeconfig --loglevel=${DEBUG_LOGLEVEL:-2}\n"],"ports":[{"name":"healthz","hostPort":10256,"containerPort":10256,"protocol":"TCP"}],"env":[{"name":"OPENSHIFT_DNS_DOMAIN","value":"cluster.local"}],"resources":{"requests":{"cpu":"100m","memory":"200Mi"}},"volumeMounts":[{"name":"host-config","readOnly":true,"mountPath":"/etc/origin/node/"},{"name":"host-sysconfig-node","readOnly":true,"mountPath":"/etc/sysconfig/origin-node"},{"name":"host-var-run","mountPath":"/var/run"},{"name":"host-var-run-dbus","readOnly":true,"mountPath":"/var/run/dbus/"},{"name":"host-var-run-ovs","readOnly":true,"mountPath":"/var/run/openvswitch/"},{"name":"host-var-run-kubernetes","readOnly":true,"mountPath":"/var/run/kubernetes/"},{"name":"host-var-run-openshift-sdn","mountPath":"/var/run/openshift-sdn"},{"name":"host-opt-cni-bin","mountPath":"/host/opt/cni/bin"},{"name":"host-etc-cni-netd","mountPath":"/etc/cni/net.d"},{"name":"host-var-lib-cni-networks-openshift-sdn","mountPath":"/var/lib/cni/networks/openshift-sdn"}],"lifecycle":{"preStop":{"exec":{"command":["rm","-Rf","/etc/cni/net.d/80-openshift-network.conf","/host/opt/cni/bin/openshift-sdn"]}}},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{"privileged":true,"runAsUser":0}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"sdn","serviceAccount":"sdn","hostNetwork":true,"hostPID":true,"securityContext":{},"schedulerName":"default-scheduler","tolerations":[{"operator":"Exists"}],"priorityClassName":"system-node-critical"}},"updateStrategy":{"type":"OnDelete"},"templateGeneration":2,"revisionHistoryLimit":10},"status":{"currentNumberScheduled":1,"numberMisscheduled":0,"desiredNumberScheduled":1,"numberReady":1,"observedGeneration":2,"updatedNumberScheduled":1,"numberAvailable":1}}
